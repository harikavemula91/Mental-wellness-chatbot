# -*- coding: utf-8 -*-
"""Mental wellness bot_manual.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o5pccSoCF4yKAQOuCxg-B7924m_rjmX8

## Backend Text emotion detection model
"""

import numpy as np
import pandas as pd
import seaborn as sns

df_test = pd.read_csv("test.csv", header=None)
df_train = pd.read_csv("train.csv", header=None)
df_val = pd.read_csv("val.csv", header=None)

df_train.head()

df_train.reset_index(drop=True, inplace=True)
df_test.reset_index(drop=True, inplace=True)
df_val.reset_index(drop=True, inplace=True)

df_train.columns = ['0']
df_test.columns = ['0']
df_val.columns = ['0']

df_train[['statement','emotion']] = df_train['0'].str.split(';', expand=True)
df_test[['statement','emotion']] = df_test['0'].str.split(';', expand=True)
df_val[['statement','emotion']] = df_val['0'].str.split(';', expand=True)

df_train.head()

df_train.drop('0', axis=1, inplace=True)
df_test.drop('0', axis=1, inplace=True)
df_val.drop('0', axis=1, inplace=True)

df_train['emotion'].value_counts()

sns.countplot(df_train['emotion'])

"""# Data Preprocessing"""

#removing pip install due to error in in streamlit
import neattext.functions as nfx

df_train['statement'] = df_train['statement'].apply(nfx.remove_stopwords)
df_test['statement'] = df_test['statement'].apply(nfx.remove_stopwords)
df_val['statement'] = df_val['statement'].apply(nfx.remove_stopwords)

"""# Data Splitting"""

X_train = df_train['statement']
y_train = df_train['emotion']
X_test = df_test['statement']
y_test = df_test['emotion']
X_val = df_val['statement']
y_val = df_val['emotion']

"""# Model training"""

from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression

pipe_lr = Pipeline(steps=[('cv',CountVectorizer()),('lr',LogisticRegression())])
pipe_lr.fit(X_train,y_train)
pipe_lr.score(X_test,y_test)

pipe_lr = Pipeline(steps=[('cv',CountVectorizer()),('rf',RandomForestClassifier())])
pipe_lr.fit(X_train,y_train)
pipe_lr.score(X_test,y_test)

pipe_lr = Pipeline(steps=[('cv', CountVectorizer()),('svm',SVC())])
pipe_lr.fit(X_train,y_train)
pipe_lr.score(X_test,y_test)

#saving the model: Logistic regression seems best

import joblib
pipeline_file = open("text_emotion.pkl","wb")
joblib.dump(pipe_lr,pipeline_file)
pipeline_file.close()

"""# Frontend deployment using Streamlit"""

#removing pip install due to error in in streamlit
import streamlit as st

import altair as alt

pipe_lr = joblib.load(open("text_emotion.pkl", "rb"))

emotions_emoji_dict = {"anger": "ðŸ˜ ", "fear": "ðŸ˜¨ðŸ˜±", "joy": "ðŸ˜‚", "sadness": "ðŸ˜”", "surprise": "ðŸ˜®", "love": "ðŸ¤—"}

def predict_emotions(docx):
    results = pipe_lr.predict([docx])
    return results[0]

def get_prediction_proba(docx):
    results = pipe_lr.predict_proba([docx])
    return results

def main():
    st.title("Emotion Detection")
    st.subheader("Detect Emotions In user's Statement")

    with st.form(key='my_form'):
        raw_text = st.text_area("Type Here")
        submit_text = st.form_submit_button(label='Submit')

    if submit_text:
        col1, col2 = st.columns(2)

        prediction = predict_emotions(raw_text)
        probability = get_prediction_proba(raw_text)

        with col1:
            st.success("Original Text")
            st.write(raw_text)

            st.success("Prediction")
            emoji_icon = emotions_emoji_dict[prediction]
            st.write("{}:{}".format(prediction, emoji_icon))
            st.write("Confidence:{}".format(np.max(probability)))

        with col2:
            st.success("Prediction Probability")
            #st.write(probability)
            proba_df = pd.DataFrame(probability, columns=pipe_lr.classes_)
            #st.write(proba_df.T)
            proba_df_clean = proba_df.T.reset_index()
            proba_df_clean.columns = ["emotions", "probability"]

            fig = alt.Chart(proba_df_clean).mark_bar().encode(x='emotions', y='probability', color='emotions')
            st.altair_chart(fig, use_container_width=True)






if __name__ == '__main__':
    main()

